generators in python:
	https://jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/
> A generator function is defined like a normal function, but whenever it needs to generate a value, it does so with the yield keyword rather than return.
> If the body of a def contains yield, the function automatically becomes a generator function (even if it also contains a return statement). There's nothing else we need to do to create one. 
> generator functions create generator iterators.
> Just remember that a generator is a special type of iterator
	-  To be considered an iterator, generators must define a few methods, one of which is __next__()
	-  To get the next value from a generator, we use the same built-in function as for iterators: next().		<<<=== V.imp line
	- (next() takes care of calling the generator's __next__() method). 
	- Since a generator is a type of iterator, it can be used in a for loop.
	
> So whenever next() is called on a generator, the generator is responsible for passing back a value to whomever called next()
	- It does so by calling yield along with the value to be passed back (e.g. yield 7). 
	- The easiest way to remember what yield does is to think of it as return (plus a little magic) for generator functions.**
	
------------
	
Here's a simple generator function:
>>> def simple_generator_function():
>>>    yield 1
>>>    yield 2
>>>    yield 3

And here are two simple ways to use it:
>>> for value in simple_generator_function():
>>>     print(value)
1
2
3
>>> our_generator = simple_generator_function()
>>> next(our_generator)
1
>>> next(our_generator)
2
>>> next(our_generator)
3	
-------------	

Magic?

What's the magic part? Glad you asked! When a generator function calls yield, the "state" of the generator function is frozen; the values of all variables are saved and the next line of code to be executed is recorded until next() is called again. 

Once it is, the generator function simply resumes where it left off. 

If next() is never called again, the state recorded during the yield call is (eventually) discarded. 

----------

> If a generator function calls return or reaches the end its definition, a StopIteration exception is raised. This signals to whoever was calling next() that the generator is exhausted (this is normal iterator behavior). 

> Once a generator has been exhausted, calling next() on it will result in an error, so you can only consume all the values of a generator once. 

The following will not work:
>>> our_generator = simple_generator_function()
>>> for value in our_generator:
>>>     print(value)

>>> # our_generator has been exhausted...
>>> print(next(our_generator))
Traceback (most recent call last):
  File "<ipython-input-13-7e48a609051a>", line 1, in <module>
    next(our_generator)
StopIteration

----------

>>> # however, we can always create a new generator
>>> # by calling the generator function again...

>>> new_generator = simple_generator_function()
>>> print(next(new_generator)) # perfectly valid
1

----------

http://anandology.com/python-practice-book/iterators.html
http://pymbook.readthedocs.io/en/latest/igd.html

